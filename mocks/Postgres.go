// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	sqlx "github.com/jmoiron/sqlx"
	mock "github.com/stretchr/testify/mock"
)

// Postgres is an autogenerated mock type for the Postgres type
type Postgres struct {
	mock.Mock
}

type Postgres_Expecter struct {
	mock *mock.Mock
}

func (_m *Postgres) EXPECT() *Postgres_Expecter {
	return &Postgres_Expecter{mock: &_m.Mock}
}

// PostgresConn provides a mock function with given fields:
func (_m *Postgres) PostgresConn() *sqlx.DB {
	ret := _m.Called()

	var r0 *sqlx.DB
	if rf, ok := ret.Get(0).(func() *sqlx.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	return r0
}

// Postgres_PostgresConn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostgresConn'
type Postgres_PostgresConn_Call struct {
	*mock.Call
}

// PostgresConn is a helper method to define mock.On call
func (_e *Postgres_Expecter) PostgresConn() *Postgres_PostgresConn_Call {
	return &Postgres_PostgresConn_Call{Call: _e.mock.On("PostgresConn")}
}

func (_c *Postgres_PostgresConn_Call) Run(run func()) *Postgres_PostgresConn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Postgres_PostgresConn_Call) Return(_a0 *sqlx.DB) *Postgres_PostgresConn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Postgres_PostgresConn_Call) RunAndReturn(run func() *sqlx.DB) *Postgres_PostgresConn_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostgres creates a new instance of Postgres. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostgres(t interface {
	mock.TestingT
	Cleanup(func())
}) *Postgres {
	mock := &Postgres{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
